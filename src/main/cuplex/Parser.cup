package generated.fr.ul.miashs.expression;

import java_cup.runtime.*;
import fr.ul.miashs.compil.arbre.*;

/* Le code de l'analyseur syntaxique */
parser code {:

:};

/* Déclarations des terminaux */
terminal Integer NOMBRE;
terminal String IDENTIFIANT, CHAINE;
terminal PLUS, MOINS, MULTIPLIER, DIVISER, EGAL, DIFFERENT, ASSIGNER, POINT_VIRGULE, VIRGULE;
terminal ACCOLADE_OUVRANTE, ACCOLADE_FERMANTE, PARENTHESE_OUVRANTE, PARENTHESE_FERMANTE;
terminal VARIABLE_PLANETE, VARIABLE_LUNE, VARIABLE_NOUVELLE_LUNE, FONCTION, SI, SINON, TANT_QUE, LIRE, AFFICHER;

/* Déclarations des non-terminaux */
non terminal Noeud programme;
non terminal Noeud instructionList,instructionEoN, instructionAccolade;
non terminal Noeud instruction;
non terminal Fonction fonction;

/* Priorités et associations */
precedence left PLUS, MOINS;
precedence left MULTIPLIER, DIVISER;

start with programme;

programme ::= instructionEoN:ion
{:
Prog prog = new Prog();
prog.ajouterUnFils(ion);
RESULT = prog;
:};

fonction ::= FONCTION IDENTIFIANT:id PARENTHESE_OUVRANTE PARENTHESE_FERMANTE instructionAccolade:ia
{:
RESULT = new Fonction(id);
:};

instructionAccolade ::= ACCOLADE_OUVRANTE instructionEoN:ie ACCOLADE_FERMANTE
{:
RESULT = ie;
:};

instructionEoN ::=
{:
RESULT = new Bloc();
:}
| instructionList:il
{:
RESULT = il;
:};

instructionList ::= instruction:i
{:
Bloc b = new Bloc();
b.ajouterUnFils(i);
RESULT = i;
:}
| instructionList:il instruction:i
{:
il.ajouterUnFils(i);
RESULT = il;
:};

instruction ::= fonction:f
{:
RESULT = f;
:};

