
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package generated.fr.ul.miashs.expression;

import java_cup.runtime.*;
import fr.ul.miashs.compil.arbre.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ParserCup extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Sym.class;
}

  /** Default constructor. */
  @Deprecated
  public ParserCup() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ParserCup(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserCup(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\055\000\002\002\004\000\002\002\003\000\002\007" +
    "\007\000\002\007\010\000\002\017\007\000\002\022\003" +
    "\000\002\022\005\000\002\010\006\000\002\015\007\000" +
    "\002\012\005\000\002\012\007\000\002\021\005\000\002" +
    "\016\011\000\002\016\007\000\002\013\005\000\002\013" +
    "\005\000\002\013\005\000\002\013\005\000\002\013\005" +
    "\000\002\013\005\000\002\014\007\000\002\014\005\000" +
    "\002\011\003\000\002\011\005\000\002\011\005\000\002" +
    "\011\005\000\002\011\005\000\002\011\003\000\002\011" +
    "\005\000\002\011\006\000\002\020\003\000\002\005\005" +
    "\000\002\004\002\000\002\004\003\000\002\003\003\000" +
    "\002\003\004\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\006" +
    "\003\000\002\006\003\000\002\006\003\000\002\006\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\142\000\026\002\uffe1\005\014\030\010\031\017\033" +
    "\026\034\030\035\024\036\007\037\023\040\005\001\002" +
    "\000\004\002\000\001\002\000\004\005\143\001\002\000" +
    "\030\002\uffd6\005\uffd6\025\uffd6\030\uffd6\031\uffd6\033\uffd6" +
    "\034\uffd6\035\uffd6\036\uffd6\037\uffd6\040\uffd6\001\002\000" +
    "\004\005\137\001\002\000\004\005\130\001\002\000\004" +
    "\002\127\001\002\000\030\002\uffdb\005\uffdb\025\uffdb\030" +
    "\uffdb\031\uffdb\033\uffdb\034\uffdb\035\uffdb\036\uffdb\037\uffdb" +
    "\040\uffdb\001\002\000\030\002\uffd8\005\uffd8\025\uffd8\030" +
    "\uffd8\031\uffd8\033\uffd8\034\uffd8\035\uffd8\036\uffd8\037\uffd8" +
    "\040\uffd8\001\002\000\004\015\124\001\002\000\030\002" +
    "\uffdd\005\uffdd\025\uffdd\030\uffdd\031\uffdd\033\uffdd\034\uffdd" +
    "\035\uffdd\036\uffdd\037\uffdd\040\uffdd\001\002\000\030\002" +
    "\uffe0\005\014\025\uffe0\030\010\031\017\033\026\034\030" +
    "\035\024\036\007\037\023\040\005\001\002\000\004\026" +
    "\115\001\002\000\030\002\uffd7\005\uffd7\025\uffd7\030\uffd7" +
    "\031\uffd7\033\uffd7\034\uffd7\035\uffd7\036\uffd7\037\uffd7\040" +
    "\uffd7\001\002\000\030\002\uffd5\005\uffd5\025\uffd5\030\uffd5" +
    "\031\uffd5\033\uffd5\034\uffd5\035\uffd5\036\uffd5\037\uffd5\040" +
    "\uffd5\001\002\000\030\002\uffdf\005\uffdf\025\uffdf\030\uffdf" +
    "\031\uffdf\033\uffdf\034\uffdf\035\uffdf\036\uffdf\037\uffdf\040" +
    "\uffdf\001\002\000\030\002\uffe3\005\uffe3\025\uffe3\030\uffe3" +
    "\031\uffe3\033\uffe3\034\uffe3\035\uffe3\036\uffe3\037\uffe3\040" +
    "\uffe3\001\002\000\010\004\033\005\032\026\107\001\002" +
    "\000\030\002\uffd9\005\uffd9\025\uffd9\030\uffd9\031\uffd9\033" +
    "\uffd9\034\uffd9\035\uffd9\036\uffd9\037\uffd9\040\uffd9\001\002" +
    "\000\004\026\063\001\002\000\030\002\uffdc\005\uffdc\025" +
    "\uffdc\030\uffdc\031\uffdc\033\uffdc\034\uffdc\035\uffdc\036\uffdc" +
    "\037\uffdc\040\uffdc\001\002\000\010\004\033\005\032\026" +
    "\034\001\002\000\030\002\uffda\005\uffda\025\uffda\030\uffda" +
    "\031\uffda\033\uffda\034\uffda\035\uffda\036\uffda\037\uffda\040" +
    "\uffda\001\002\000\036\007\uffe6\010\uffe6\011\uffe6\012\uffe6" +
    "\013\uffe6\014\uffe6\016\uffe6\017\uffe6\020\uffe6\021\uffe6\022" +
    "\uffe6\023\uffe6\026\055\027\uffe6\001\002\000\034\007\uffeb" +
    "\010\uffeb\011\uffeb\012\uffeb\013\uffeb\014\uffeb\016\uffeb\017" +
    "\uffeb\020\uffeb\021\uffeb\022\uffeb\023\uffeb\027\uffeb\001\002" +
    "\000\010\004\033\005\032\026\043\001\002\000\014\007" +
    "\037\010\041\011\036\012\042\016\040\001\002\000\010" +
    "\004\033\005\032\026\043\001\002\000\010\004\033\005" +
    "\032\026\043\001\002\000\030\002\uffec\005\uffec\025\uffec" +
    "\030\uffec\031\uffec\033\uffec\034\uffec\035\uffec\036\uffec\037" +
    "\uffec\040\uffec\001\002\000\010\004\033\005\032\026\043" +
    "\001\002\000\010\004\033\005\032\026\043\001\002\000" +
    "\010\004\033\005\032\026\043\001\002\000\034\007\uffe7" +
    "\010\uffe7\011\uffe7\012\uffe7\013\uffe7\014\uffe7\016\uffe7\017" +
    "\uffe7\020\uffe7\021\uffe7\022\uffe7\023\uffe7\027\uffe7\001\002" +
    "\000\014\007\037\010\041\011\036\012\042\027\046\001" +
    "\002\000\034\007\uffe5\010\uffe5\011\uffe5\012\uffe5\013\uffe5" +
    "\014\uffe5\016\uffe5\017\uffe5\020\uffe5\021\uffe5\022\uffe5\023" +
    "\uffe5\027\uffe5\001\002\000\034\007\uffe9\010\uffe9\011\036" +
    "\012\042\013\uffe9\014\uffe9\016\uffe9\017\uffe9\020\uffe9\021" +
    "\uffe9\022\uffe9\023\uffe9\027\uffe9\001\002\000\034\007\uffea" +
    "\010\uffea\011\036\012\042\013\uffea\014\uffea\016\uffea\017" +
    "\uffea\020\uffea\021\uffea\022\uffea\023\uffea\027\uffea\001\002" +
    "\000\034\007\uffe8\010\uffe8\011\uffe8\012\uffe8\013\uffe8\014" +
    "\uffe8\016\uffe8\017\uffe8\020\uffe8\021\uffe8\022\uffe8\023\uffe8" +
    "\027\uffe8\001\002\000\014\007\037\010\041\011\036\012" +
    "\042\027\053\001\002\000\014\007\uffe5\010\uffe5\011\uffe5" +
    "\012\uffe5\016\uffe5\001\002\000\030\002\uffed\005\uffed\025" +
    "\uffed\030\uffed\031\uffed\033\uffed\034\uffed\035\uffed\036\uffed" +
    "\037\uffed\040\uffed\001\002\000\010\004\033\005\032\026" +
    "\043\001\002\000\004\027\062\001\002\000\016\007\037" +
    "\010\041\011\036\012\042\023\060\027\ufffc\001\002\000" +
    "\010\004\033\005\032\026\043\001\002\000\014\007\037" +
    "\010\041\011\036\012\042\027\ufffb\001\002\000\034\007" +
    "\uffe4\010\uffe4\011\uffe4\012\uffe4\013\uffe4\014\uffe4\016\uffe4" +
    "\017\uffe4\020\uffe4\021\uffe4\022\uffe4\023\uffe4\027\uffe4\001" +
    "\002\000\010\004\033\005\032\026\043\001\002\000\004" +
    "\027\102\001\002\000\026\007\037\010\041\011\036\012" +
    "\042\013\071\014\070\017\073\020\072\021\066\022\067" +
    "\001\002\000\010\004\033\005\032\026\043\001\002\000" +
    "\010\004\033\005\032\026\043\001\002\000\010\004\033" +
    "\005\032\026\043\001\002\000\010\004\033\005\032\026" +
    "\043\001\002\000\010\004\033\005\032\026\043\001\002" +
    "\000\010\004\033\005\032\026\043\001\002\000\014\007" +
    "\037\010\041\011\036\012\042\027\ufff1\001\002\000\014" +
    "\007\037\010\041\011\036\012\042\027\ufff0\001\002\000" +
    "\014\007\037\010\041\011\036\012\042\027\ufff3\001\002" +
    "\000\014\007\037\010\041\011\036\012\042\027\ufff2\001" +
    "\002\000\014\007\037\010\041\011\036\012\042\027\uffee" +
    "\001\002\000\014\007\037\010\041\011\036\012\042\027" +
    "\uffef\001\002\000\004\024\103\001\002\000\026\005\014" +
    "\025\uffe1\030\010\031\017\033\026\034\030\035\024\036" +
    "\007\037\023\040\005\001\002\000\030\002\ufff9\005\ufff9" +
    "\025\ufff9\030\ufff9\031\ufff9\033\ufff9\034\ufff9\035\ufff9\036" +
    "\ufff9\037\ufff9\040\ufff9\001\002\000\004\025\106\001\002" +
    "\000\032\002\uffe2\005\uffe2\025\uffe2\030\uffe2\031\uffe2\032" +
    "\uffe2\033\uffe2\034\uffe2\035\uffe2\036\uffe2\037\uffe2\040\uffe2" +
    "\001\002\000\010\004\033\005\032\026\043\001\002\000" +
    "\014\007\037\010\041\011\036\012\042\016\111\001\002" +
    "\000\030\002\ufff8\005\ufff8\025\ufff8\030\ufff8\031\ufff8\033" +
    "\ufff8\034\ufff8\035\ufff8\036\ufff8\037\ufff8\040\ufff8\001\002" +
    "\000\014\007\037\010\041\011\036\012\042\027\113\001" +
    "\002\000\014\007\uffe5\010\uffe5\011\uffe5\012\uffe5\016\uffe5" +
    "\001\002\000\030\002\ufff7\005\ufff7\025\ufff7\030\ufff7\031" +
    "\ufff7\033\ufff7\034\ufff7\035\ufff7\036\ufff7\037\ufff7\040\ufff7" +
    "\001\002\000\010\004\033\005\032\026\043\001\002\000" +
    "\004\027\117\001\002\000\004\024\103\001\002\000\032" +
    "\002\ufff4\005\ufff4\025\ufff4\030\ufff4\031\ufff4\032\121\033" +
    "\ufff4\034\ufff4\035\ufff4\036\ufff4\037\ufff4\040\ufff4\001\002" +
    "\000\004\024\103\001\002\000\030\002\ufff5\005\ufff5\025" +
    "\ufff5\030\ufff5\031\ufff5\033\ufff5\034\ufff5\035\ufff5\036\ufff5" +
    "\037\ufff5\040\ufff5\001\002\000\030\002\uffde\005\uffde\025" +
    "\uffde\030\uffde\031\uffde\033\uffde\034\uffde\035\uffde\036\uffde" +
    "\037\uffde\040\uffde\001\002\000\010\004\033\005\032\026" +
    "\043\001\002\000\014\007\037\010\041\011\036\012\042" +
    "\016\126\001\002\000\030\002\ufffa\005\ufffa\025\ufffa\030" +
    "\ufffa\031\ufffa\033\ufffa\034\ufffa\035\ufffa\036\ufffa\037\ufffa" +
    "\040\ufffa\001\002\000\004\002\001\001\002\000\004\026" +
    "\131\001\002\000\012\004\033\005\032\026\043\027\133" +
    "\001\002\000\004\027\135\001\002\000\004\024\103\001" +
    "\002\000\030\002\uffff\005\uffff\025\uffff\030\uffff\031\uffff" +
    "\033\uffff\034\uffff\035\uffff\036\uffff\037\uffff\040\uffff\001" +
    "\002\000\004\024\103\001\002\000\030\002\ufffe\005\ufffe" +
    "\025\ufffe\030\ufffe\031\ufffe\033\ufffe\034\ufffe\035\ufffe\036" +
    "\ufffe\037\ufffe\040\ufffe\001\002\000\004\026\140\001\002" +
    "\000\004\027\141\001\002\000\004\016\142\001\002\000" +
    "\030\002\ufffd\005\ufffd\025\ufffd\030\ufffd\031\ufffd\033\ufffd" +
    "\034\ufffd\035\ufffd\036\ufffd\037\ufffd\040\ufffd\001\002\000" +
    "\004\016\144\001\002\000\030\002\ufff6\005\ufff6\025\ufff6" +
    "\030\ufff6\031\ufff6\033\ufff6\034\ufff6\035\ufff6\036\ufff6\037" +
    "\ufff6\040\ufff6\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\142\000\034\002\010\003\015\004\003\006\021\007" +
    "\014\010\026\012\012\014\011\015\030\016\024\017\017" +
    "\020\005\021\020\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\006\122\007\014" +
    "\010\026\012\012\014\011\015\030\016\024\017\017\020" +
    "\005\021\020\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\011\107\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\011\034\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\011\051" +
    "\001\001\000\002\001\001\000\004\011\050\001\001\000" +
    "\004\011\047\001\001\000\002\001\001\000\004\011\046" +
    "\001\001\000\004\011\043\001\001\000\004\011\044\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\011\056\022\055\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\011\060\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\011\064\013\063\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\011\100\001\001\000\004" +
    "\011\077\001\001\000\004\011\076\001\001\000\004\011" +
    "\075\001\001\000\004\011\074\001\001\000\004\011\073" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\103\001\001\000\032\003\015\004\104\006" +
    "\021\007\014\010\026\012\012\014\011\015\030\016\024" +
    "\017\017\020\005\021\020\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\011\111\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\011\064\013\115" +
    "\001\001\000\002\001\001\000\004\005\117\001\001\000" +
    "\002\001\001\000\004\005\121\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\011\124\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\011\056\022\131\001\001\000\002\001\001\000" +
    "\004\005\133\001\001\000\002\001\001\000\004\005\135" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserCup$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserCup$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserCup$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}






/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ParserCup$actions {
  private final ParserCup parser;

  /** Constructor */
  CUP$ParserCup$actions(ParserCup parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ParserCup$do_action_part00000000(
    int                        CUP$ParserCup$act_num,
    java_cup.runtime.lr_parser CUP$ParserCup$parser,
    java.util.Stack            CUP$ParserCup$stack,
    int                        CUP$ParserCup$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserCup$result;

      /* select the action based on the action number */
      switch (CUP$ParserCup$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= programme EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Noeud start_val = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		RESULT = start_val;
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserCup$parser.done_parsing();
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // programme ::= instructionEoN 
            {
              Noeud RESULT =null;
		int ionleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int ionright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Noeud ion = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
Prog prog = new Prog();
prog.ajouterUnFils(ion);
RESULT = prog;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("programme",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // fonction ::= FONCTION IDENTIFIANT PARENTHESE_OUVRANTE PARENTHESE_FERMANTE instructionAccolade 
            {
              Noeud RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		int ialeft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int iaright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Noeud ia = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
Fonction f = new Fonction(id);
f.ajouterUnFils(ia);
RESULT = f;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("fonction",5, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // fonction ::= FONCTION IDENTIFIANT PARENTHESE_OUVRANTE parametres PARENTHESE_FERMANTE instructionAccolade 
            {
              Noeud RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).value;
		int lileft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int liright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Noeud li = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int ialeft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int iaright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Noeud ia = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
Fonction f = new Fonction(id);
f.ajouterUnFils(li);
RESULT = f;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("fonction",5, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // appelfonction ::= APPEL IDENTIFIANT PARENTHESE_OUVRANTE PARENTHESE_FERMANTE POINT_VIRGULE 
            {
              Noeud RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		
RESULT = new Appel(id);

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("appelfonction",13, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // parametres ::= expression 
            {
              Noeud RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Noeud e = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
RESULT =e;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("parametres",16, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // parametres ::= expression VIRGULE expression 
            {
              Noeud RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Noeud e1 = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Noeud e2 = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
e1.ajouterUnFils(e2);
RESULT = e1;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("parametres",16, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // affectation ::= IDENTIFIANT ASSIGNER expression POINT_VIRGULE 
            {
              Noeud RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Noeud e = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		
Affectation a = new Affectation();
a.setFilsGauche(new Idf(id));
a.setFilsDroit(e);
RESULT = a;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("affectation",6, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // tantQue ::= TANT_QUE PARENTHESE_OUVRANTE expressionCondition PARENTHESE_FERMANTE instructionAccolade 
            {
              Noeud RESULT =null;
		int ecleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int ecright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Noeud ec = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int ialeft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int iaright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Noeud ia = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
TantQue tq = new TantQue(1);
tq.setCondition(ec);
Bloc b = new Bloc();
b.ajouterDesFils(ia.getFils());
tq.setBloc(b);
RESULT = tq;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("tantQue",11, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // retour ::= RETOUR expression POINT_VIRGULE 
            {
              Noeud RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Noeud e = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		
Retour r = new Retour(0);
r.setLeFils(e);
RESULT = r;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("retour",8, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // retour ::= RETOUR PARENTHESE_OUVRANTE expression PARENTHESE_FERMANTE POINT_VIRGULE 
            {
              Noeud RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Noeud e = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		
Retour r = new Retour(0);
r.setLeFils(e);
RESULT = r;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("retour",8, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // lire ::= READ IDENTIFIANT POINT_VIRGULE 
            {
              Noeud RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		
Lire l = new Lire();
l.ajouterUnFils(new Idf(id));
RESULT = l;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("lire",15, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // si ::= SI PARENTHESE_OUVRANTE expressionCondition PARENTHESE_FERMANTE instructionAccolade SINON instructionAccolade 
            {
              Noeud RESULT =null;
		int ecleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).left;
		int ecright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).right;
		Noeud ec = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).value;
		int ialeft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int iaright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Noeud ia = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int ibleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int ibright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Noeud ib = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
Si s = new Si(1);
s.setCondition(ec);
Bloc b = new Bloc();
b.ajouterDesFils(ia.getFils());
s.setBlocAlors(b);
Bloc b2 = new Bloc();
b2.ajouterDesFils(ib.getFils());
s.setBlocSinon(b2);
RESULT = s;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("si",12, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // si ::= SI PARENTHESE_OUVRANTE expressionCondition PARENTHESE_FERMANTE instructionAccolade 
            {
              Noeud RESULT =null;
		int ecleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int ecright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Noeud ec = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int ialeft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int iaright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Noeud ia = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
Si s = new Si(2);
s.setCondition(ec);
Bloc b = new Bloc();
b.ajouterDesFils(ia.getFils());
s.setBlocAlors(b);
RESULT = s;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("si",12, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expressionCondition ::= expression EGAL expression 
            {
              Noeud RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Noeud e1 = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Noeud e2 = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
Egal e = new Egal();
e.setFilsGauche(e1);
e.setFilsDroit(e2);
RESULT = e;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expressionCondition",9, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expressionCondition ::= expression DIFFERENT expression 
            {
              Noeud RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Noeud e1 = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Noeud e2 = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
Different d = new Different();
d.setFilsGauche(e1);
d.setFilsDroit(e2);
RESULT = d;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expressionCondition",9, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expressionCondition ::= expression SUPERIEUR expression 
            {
              Noeud RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Noeud e1 = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Noeud e2 = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
Superieur d = new Superieur();
d.setFilsGauche(e1);
d.setFilsDroit(e2);
RESULT = d;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expressionCondition",9, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expressionCondition ::= expression SUPERIEUR_EGAL expression 
            {
              Noeud RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Noeud e1 = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Noeud e2 = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
SuperieurEgal d = new SuperieurEgal();
d.setFilsGauche(e1);
d.setFilsDroit(e2);
RESULT = d;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expressionCondition",9, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expressionCondition ::= expression INFERIEUR expression 
            {
              Noeud RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Noeud e1 = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Noeud e2 = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
Inferieur d = new Inferieur();
d.setFilsGauche(e1);
d.setFilsDroit(e2);
RESULT = d;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expressionCondition",9, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expressionCondition ::= expression INFERIEUR_EGAL expression 
            {
              Noeud RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Noeud e1 = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Noeud e2 = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
InferieurEgal d = new InferieurEgal();
d.setFilsGauche(e1);
d.setFilsDroit(e2);
RESULT = d;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expressionCondition",9, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // afficher ::= AFFICHER PARENTHESE_OUVRANTE expression PARENTHESE_FERMANTE POINT_VIRGULE 
            {
              Noeud RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Noeud e = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		
Ecrire a = new Ecrire();
a.setLeFils(e);
RESULT = a;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("afficher",10, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // afficher ::= AFFICHER expression POINT_VIRGULE 
            {
              Noeud RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Noeud e = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		
Ecrire a = new Ecrire();
a.setLeFils(e);
RESULT = a;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("afficher",10, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expression ::= NOMBRE 
            {
              Noeud RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
RESULT = new Const(n);

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expression",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expression ::= expression PLUS expression 
            {
              Noeud RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Noeud e1 = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Noeud e2 = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
Plus p = new Plus();
p.setFilsGauche(e1);
p.setFilsDroit(e2);
RESULT = p;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expression",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expression ::= expression MOINS expression 
            {
              Noeud RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Noeud e1 = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Noeud e2 = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
Moins m = new Moins();
m.setFilsGauche(e1);
m.setFilsDroit(e2);
RESULT = m;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expression",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expression ::= expression MULTIPLIER expression 
            {
              Noeud RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Noeud e1 = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Noeud e2 = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
Multiplication m = new Multiplication();
m.setFilsGauche(e1);
m.setFilsDroit(e2);
RESULT = m;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expression",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expression ::= expression DIVISER expression 
            {
              Noeud RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Noeud e1 = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Noeud e2 = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
Division d = new Division();
d.setFilsGauche(e1);
d.setFilsDroit(e2);
RESULT = d;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expression",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expression ::= IDENTIFIANT 
            {
              Noeud RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
RESULT = new Idf(id);

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expression",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expression ::= PARENTHESE_OUVRANTE expression PARENTHESE_FERMANTE 
            {
              Noeud RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Noeud e = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		
RESULT =e;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expression",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expression ::= IDENTIFIANT PARENTHESE_OUVRANTE parametres PARENTHESE_FERMANTE 
            {
              Noeud RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		int lileft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int liright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Noeud li = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		
Fonction f = new Fonction(id);
f.ajouterUnFils(li);
RESULT = f;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expression",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // commentaire ::= COMMENTAIRE 
            {
              Object RESULT =null;
		
/* ne rien faire */

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("commentaire",14, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // instructionAccolade ::= ACCOLADE_OUVRANTE instructionEoN ACCOLADE_FERMANTE 
            {
              Noeud RESULT =null;
		int ieleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int ieright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Noeud ie = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		
RESULT = ie;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("instructionAccolade",3, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // instructionEoN ::= 
            {
              Noeud RESULT =null;
		
RESULT = new Bloc();

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("instructionEoN",2, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // instructionEoN ::= instructionList 
            {
              Noeud RESULT =null;
		int illeft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Noeud il = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
RESULT = il;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("instructionEoN",2, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // instructionList ::= instruction 
            {
              Noeud RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Noeud i = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
Bloc b = new Bloc();
b.ajouterUnFils(i);
RESULT = b;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("instructionList",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // instructionList ::= instructionList instruction 
            {
              Noeud RESULT =null;
		int illeft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Noeud il = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Noeud i = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
il.ajouterUnFils(i);
RESULT = il;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("instructionList",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // instruction ::= fonction 
            {
              Noeud RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Noeud f = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
RESULT = f;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("instruction",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // instruction ::= affectation 
            {
              Noeud RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Noeud a = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
RESULT = a;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("instruction",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // instruction ::= afficher 
            {
              Noeud RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Noeud a = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
RESULT = a;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("instruction",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // instruction ::= tantQue 
            {
              Noeud RESULT =null;
		int tqleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int tqright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Noeud tq = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
RESULT = tq;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("instruction",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // instruction ::= si 
            {
              Noeud RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Noeud s = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
RESULT = s;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("instruction",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // instruction ::= retour 
            {
              Noeud RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Noeud r = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
RESULT = r;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("instruction",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // instruction ::= appelfonction 
            {
              Noeud RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Noeud a = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
RESULT = a;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("instruction",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // instruction ::= commentaire 
            {
              Noeud RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
/* ne rien faire */

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("instruction",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // instruction ::= lire 
            {
              Noeud RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Noeud l = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
RESULT = l;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("instruction",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ParserCup$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ParserCup$do_action(
    int                        CUP$ParserCup$act_num,
    java_cup.runtime.lr_parser CUP$ParserCup$parser,
    java.util.Stack            CUP$ParserCup$stack,
    int                        CUP$ParserCup$top)
    throws java.lang.Exception
    {
              return CUP$ParserCup$do_action_part00000000(
                               CUP$ParserCup$act_num,
                               CUP$ParserCup$parser,
                               CUP$ParserCup$stack,
                               CUP$ParserCup$top);
    }
}

}
